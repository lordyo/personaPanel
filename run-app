#!/bin/bash
# Script to run the Entity Simulation Framework

# Parse command line arguments
DEBUG_MODE=false
for arg in "$@"; do
  case $arg in
    --debug)
      DEBUG_MODE=true
      shift
      ;;
    *)
      # Unknown option
      ;;
  esac
done

# Display welcome message
echo "Starting Entity Simulation Framework..."
if [ "$DEBUG_MODE" = true ]; then
  echo "Running in DEBUG mode - backend will run in foreground with visible output"
fi

# Go to the project root directory
cd "$(dirname "$0")"

# Kill any existing backend servers
if pgrep -f "python.*backend/scripts/run_server.py" > /dev/null; then
  echo "Killing existing backend server processes..."
  pkill -f "python.*backend/scripts/run_server.py"
  sleep 1  # Give some time for processes to terminate
  
  # Check if any processes are still running
  if pgrep -f "python.*backend/scripts/run_server.py" > /dev/null; then
    echo "Forcefully terminating remaining processes..."
    pkill -9 -f "python.*backend/scripts/run_server.py"
    sleep 1
  fi
  
  echo "Previous backend server processes have been terminated."
fi

# Start the backend server in the background
echo "Starting backend server..."

# Check if venv exists in backend
if [ ! -d "backend/venv" ]; then
  echo "Creating virtual environment..."
  cd backend
  python3 -m venv venv
  source venv/bin/activate
  pip install -r ../requirements.txt
  cd ..
fi

# Run the server
cd backend
source venv/bin/activate
# Set the port to 5000 to match what the frontend proxy expects
export PORT=5000
echo "Backend will run on port 5000"

# Check if we're in debug mode
if [ "$DEBUG_MODE" = true ]; then
  # In debug mode, run the backend in the foreground in a separate terminal
  echo "Running backend in debug mode (foreground)..."
  
  # Function to check if a command exists
  command_exists() {
    command -v "$1" &> /dev/null
  }
  
  # Try different terminal emulators
  if command_exists gnome-terminal; then
    gnome-terminal --title="Backend Server" -- bash -c "source venv/bin/activate && python3 scripts/run_server.py; read -p 'Press Enter to close...'"
  elif command_exists xterm; then
    xterm -title "Backend Server" -e "source venv/bin/activate && python3 scripts/run_server.py; read -p 'Press Enter to close...'"
  elif command_exists konsole; then
    konsole --new-tab -p tabtitle="Backend Server" -e bash -c "source venv/bin/activate && python3 scripts/run_server.py; read -p 'Press Enter to close...'"
  elif command_exists terminal; then
    terminal -e "source venv/bin/activate && python3 scripts/run_server.py; read -p 'Press Enter to close...'"
  else
    echo "No terminal emulator found. Running backend in current terminal..."
    echo "Press Ctrl+C to stop the backend when you're done."
    source venv/bin/activate && python3 scripts/run_server.py
    # If we get here, the backend has stopped, so exit the script
    exit 0
  fi
  
  # Give it a moment to start up
  sleep 2
else
  # In normal mode, run the backend in the background
  python3 scripts/run_server.py > ../backend.log 2>&1 &
  BACKEND_PID=$!
  echo "Backend server started with PID: $BACKEND_PID"
fi

cd ..

# Check if frontend dev server is already running
if lsof -i :5001 > /dev/null; then
  echo "Killing existing frontend development server..."
  kill $(lsof -t -i:5001) 2>/dev/null || true
  sleep 1
  
  # Force kill if still running
  if lsof -i :5001 > /dev/null; then
    echo "Forcefully terminating frontend server..."
    kill -9 $(lsof -t -i:5001) 2>/dev/null || true
    sleep 1
  fi
  
  echo "Previous frontend server has been terminated."
fi

# Start the frontend in a new terminal window
echo "Starting frontend..."
cd frontend

# Check if node_modules exists
if [ ! -d "node_modules" ]; then
  echo "Installing frontend dependencies..."
  npm install
fi

# Start the development server on port 5001
echo "Starting React development server on port 5001..."
PORT=5001 npm start

# When the user stops the React app, also stop the backend if it's running in background
if [ "$DEBUG_MODE" = false ] && [ -n "$BACKEND_PID" ]; then
  trap "kill $BACKEND_PID 2>/dev/null" EXIT
fi

echo "Application stopped." 